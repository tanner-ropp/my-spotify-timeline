{"ast":null,"code":"var _jsxFileName = \"/Users/twropp/Desktop/Summer-Projects/spotify-timeline-app/client/src/components/ReleaseCard.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\nconst calendar = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst today = new Date();\n\nclass ReleaseCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tracks: []\n    };\n  }\n\n  componentDidMount() {\n    const release = this.props.releaseInfo;\n    spotifyWebApi.getAlbum(release.id).then(fullRelease => {\n      this.setState({\n        tracks: fullRelease.tracks.items\n      });\n    });\n  }\n\n  render() {\n    const release = this.props.releaseInfo;\n    const releaseDate = new Date(release.release_date);\n    var displayedDate = '';\n\n    if (releaseDate.getFullYear() === today.getFullYear()) {\n      displayedDate = displayedDate.concat(calendar[releaseDate.getMonth()]);\n      displayedDate = displayedDate.concat(' ' + releaseDate.getDate() + ', ');\n    }\n\n    displayedDate = displayedDate.concat(releaseDate.getFullYear());\n    const trackList = this.state.tracks.map(track => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: track.id,\n        className: \"track-playbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: \"blue\",\n          verticalAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, track.name), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => spotifyWebApi.play({\n          context_uri: release.uri,\n          offset: {\n            \"uri\": track.uri\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, \"Play\"));\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: release.id,\n      className: \"release-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: release.images[0].url,\n      height: \"200\",\n      onClick: () => spotifyWebApi.play({\n        context_uri: release.uri\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 20\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"release-card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }\n    }, displayedDate), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, release.name), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    }, \"by \", release.artists[0].name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"release-tracklist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, trackList));\n  }\n\n}\n\nexport default ReleaseCard;","map":{"version":3,"sources":["/Users/twropp/Desktop/Summer-Projects/spotify-timeline-app/client/src/components/ReleaseCard.js"],"names":["React","Component","Spotify","spotifyWebApi","calendar","today","Date","ReleaseCard","constructor","props","state","tracks","componentDidMount","release","releaseInfo","getAlbum","id","then","fullRelease","setState","items","render","releaseDate","release_date","displayedDate","getFullYear","concat","getMonth","getDate","trackList","map","track","backgroundColor","verticalAlign","name","play","context_uri","uri","offset","images","url","artists"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Spotify from 'spotify-web-api-js'\n\n\nconst spotifyWebApi = new Spotify();\nconst calendar = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst today = new Date();\n\nclass ReleaseCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        tracks : []\n    }\n  }\n\n  componentDidMount() {\n      const release = this.props.releaseInfo;\n      spotifyWebApi.getAlbum(release.id)\n      .then((fullRelease) => {\n          this.setState({\n              tracks : fullRelease.tracks.items\n          })\n      });\n  }\n\n  render() {\n    const release = this.props.releaseInfo;\n    const releaseDate = new Date(release.release_date);\n\n    var displayedDate = '';\n    if (releaseDate.getFullYear() === today.getFullYear()) {\n        displayedDate = displayedDate.concat(calendar[releaseDate.getMonth()]);\n        displayedDate = displayedDate.concat(' ' + releaseDate.getDate() + ', ');\n    }\n    displayedDate = displayedDate.concat(releaseDate.getFullYear());\n\n    const trackList = this.state.tracks.map((track) => {\n        return (\n            <div key={track.id} className=\"track-playbar\">\n                <div style={{backgroundColor: \"blue\", verticalAlign: \"center\"}}>{track.name}</div>\n                <button onClick={() => spotifyWebApi.play({context_uri : release.uri, offset : {\"uri\" : track.uri}})}>\n                    Play\n                </button>\n            </div>\n        );\n    })\n\n      return (\n          <div key={release.id} className=\"release-card\">\n              <div><img src={release.images[0].url} height=\"200\" onClick={() => spotifyWebApi.play({context_uri : release.uri})}></img></div>\n              <div className=\"release-card-body\">\n                  <div>{displayedDate}</div>\n                  <h2>{release.name}</h2>\n                  <h3>by {release.artists[0].name}</h3>\n              </div>\n              <div className=\"release-tracklist\">{trackList}</div>\n          </div>\n      );\n  }\n}\n\nexport default ReleaseCard;\n"]},"metadata":{},"sourceType":"module"}