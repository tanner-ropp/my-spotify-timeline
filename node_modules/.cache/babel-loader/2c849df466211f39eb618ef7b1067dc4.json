{"ast":null,"code":"var _jsxFileName = \"/Users/twropp/Desktop/Summer-Projects/spotify-timeline-app/client/src/components/ReleaseCard.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\nconst calendar = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nclass ReleaseCard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const props = this.props;\n    /*const artistReleases = this.state.artistReleases;\n    const releaseList = artistReleases.map((release)=> {\n        const releaseDate = new Date(release.release_date);\n         var displayedDate = '';\n        if (releaseDate.getFullYear() == today.getFullYear()) {\n            displayedDate = displayedDate.concat(calendar[releaseDate.getMonth()]);\n            displayedDate = displayedDate.concat(' ' + releaseDate.getDate() + ', ');\n        }\n        displayedDate = displayedDate.concat(releaseDate.getFullYear());\n         const tracks = [];\n        spotifyWebApi.getAlbum(release.id)\n        .then((fullRelease) => {\n            tracks.push(fullRelease.tracks.items);\n            console.log(tracks);\n        });\n         console.log(tracks);\n    \n        const trackList = tracks.map((track) => {\n            return (\n                <div>hi</div>\n            );\n        })\n         return (\n            <div key={release.id} className=\"release-card\">\n                <div><img src={release.images[0].url} height=\"200\" onClick={() => spotifyWebApi.play({context_uri : release.uri})}></img></div>\n                <div className=\"release-card-body\">\n                    <div>{displayedDate}</div>\n                    <h2>{release.name}</h2>\n                    <h3>by {release.artists[0].name}</h3>\n                </div>\n                <div className=\"release-playbar\">{trackList}</div>\n            </div>\n         )\n    })*/\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: props.releaseInfo.id,\n      className: \"release-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: props.releaseInfo.images[0].url,\n      height: \"200\",\n      onClick: () => spotifyWebApi.play({\n        context_uri: props.releaseInfo.uri\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 20\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"release-card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }\n    }, props.releaseInfo.name), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    }, \"by \", props.releaseInfo.artists[0].name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"release-playbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}\n\nexport default ReleaseCard;","map":{"version":3,"sources":["/Users/twropp/Desktop/Summer-Projects/spotify-timeline-app/client/src/components/ReleaseCard.js"],"names":["React","Component","Spotify","spotifyWebApi","calendar","ReleaseCard","constructor","props","componentDidMount","render","releaseInfo","id","images","url","play","context_uri","uri","name","artists"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAGA,MAAMC,aAAa,GAAG,IAAID,OAAJ,EAAtB;AACA,MAAME,QAAQ,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAAjB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAClCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAED;;AAEDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMF,KAAK,GAAG,KAAKA,KAAnB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CE,wBACI;AAAK,MAAA,GAAG,EAAEA,KAAK,CAACG,WAAN,CAAkBC,EAA5B;AAAgC,MAAA,SAAS,EAAC,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK;AAAK,MAAA,GAAG,EAAEJ,KAAK,CAACG,WAAN,CAAkBE,MAAlB,CAAyB,CAAzB,EAA4BC,GAAtC;AAA2C,MAAA,MAAM,EAAC,KAAlD;AAAwD,MAAA,OAAO,EAAE,MAAMV,aAAa,CAACW,IAAd,CAAmB;AAACC,QAAAA,WAAW,EAAGR,KAAK,CAACG,WAAN,CAAkBM;AAAjC,OAAnB,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CADJ,eAEI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKT,KAAK,CAACG,WAAN,CAAkBO,IAAvB,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAQV,KAAK,CAACG,WAAN,CAAkBQ,OAAlB,CAA0B,CAA1B,EAA6BD,IAArC,CAHJ,CAFJ,eAOI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ;AAWH;;AAlEiC;;AAqEpC,eAAeZ,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Spotify from 'spotify-web-api-js'\n\n\nconst spotifyWebApi = new Spotify();\nconst calendar = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nclass ReleaseCard extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    const props = this.props;\n    /*const artistReleases = this.state.artistReleases;\n    const releaseList = artistReleases.map((release)=> {\n        const releaseDate = new Date(release.release_date);\n\n        var displayedDate = '';\n        if (releaseDate.getFullYear() == today.getFullYear()) {\n            displayedDate = displayedDate.concat(calendar[releaseDate.getMonth()]);\n            displayedDate = displayedDate.concat(' ' + releaseDate.getDate() + ', ');\n        }\n        displayedDate = displayedDate.concat(releaseDate.getFullYear());\n\n        const tracks = [];\n        spotifyWebApi.getAlbum(release.id)\n        .then((fullRelease) => {\n            tracks.push(fullRelease.tracks.items);\n            console.log(tracks);\n        });\n\n        console.log(tracks);\n\n\n\n\n\n        const trackList = tracks.map((track) => {\n            return (\n                <div>hi</div>\n            );\n        })\n\n        return (\n            <div key={release.id} className=\"release-card\">\n                <div><img src={release.images[0].url} height=\"200\" onClick={() => spotifyWebApi.play({context_uri : release.uri})}></img></div>\n                <div className=\"release-card-body\">\n                    <div>{displayedDate}</div>\n                    <h2>{release.name}</h2>\n                    <h3>by {release.artists[0].name}</h3>\n                </div>\n                <div className=\"release-playbar\">{trackList}</div>\n            </div>\n\n        )\n    })*/\n\n      return (\n          <div key={props.releaseInfo.id} className=\"release-card\">\n              <div><img src={props.releaseInfo.images[0].url} height=\"200\" onClick={() => spotifyWebApi.play({context_uri : props.releaseInfo.uri})}></img></div>\n              <div className=\"release-card-body\">\n                  <div>{}</div>\n                  <h2>{props.releaseInfo.name}</h2>\n                  <h3>by {props.releaseInfo.artists[0].name}</h3>\n              </div>\n              <div className=\"release-playbar\">{}</div>\n          </div>\n      );\n  }\n}\n\nexport default ReleaseCard;\n"]},"metadata":{},"sourceType":"module"}