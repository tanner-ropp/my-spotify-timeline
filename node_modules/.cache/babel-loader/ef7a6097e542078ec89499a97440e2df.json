{"ast":null,"code":"var _jsxFileName = \"/Users/twropp/Desktop/Summer-Projects/spotify-timeline-app/client/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: [],\n      // just artists\n      artistAlbums: [],\n      // albums grouped by artist,\n      artistReleases: [],\n      userDataReceived: false,\n      // used to control rendering,\n      displayName: \"\",\n      profileImage: \"\"\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n  }\n\n  componentDidMount() {\n    /*if (this.state.loggedIn) {\n        spotifyWebApi.getFollowedArtists({limit:50}) // WHAT IF YOU HAVE MORE THAN 50 FOLLOWED ARTISTS?\n        .then((response) => { // waits for artists followed\n            this.setState({\n                artists : response.artists.items\n            });\n            return response.artists.items.map((artist) => {return {name : artist.name, id : artist.id}});\n        })\n        .then((artists) => { // waits for artist id array\n            const artistAlbums = artists.map((artist) => {\n                return spotifyWebApi.getArtistAlbums(artist.id, {limit:10, country:'US'});\n            });\n            return Promise.all(artistAlbums); // this resolves the promise for each album request\n        })\n        .then((albums) => {\n            console.log(albums);\n            this.setState({\n                artistAlbums: albums,\n                userDataReceived : true\n            });\n        });\n    }*/\n    //spotifyWebApi.play({});\n    if (this.state.loggedIn) {\n      spotifyWebApi.getMe().then(response => {\n        this.setState({\n          displayName: response.display_name,\n          profileImage: response.images[0].url\n        });\n      });\n      spotifyWebApi.getFollowedArtists({\n        limit: 20\n      }) // WHAT IF YOU HAVE MORE THAN 50 FOLLOWED ARTISTS?\n      .then(response => {\n        // waits for artists followed\n        this.setState({\n          artists: response.artists.items\n        });\n        return response.artists.items.map(artist => {\n          return {\n            name: artist.name,\n            id: artist.id\n          };\n        });\n      }).then(artists => {\n        // waits for artist id array\n        const artistAlbums = artists.map(artist => {\n          return spotifyWebApi.getArtistAlbums(artist.id, {\n            limit: 10,\n            country: 'US'\n          }).then(albums => {\n            //console.log(albums.items);\n            return albums.items;\n          });\n        });\n        return Promise.all(artistAlbums); //return Promise.all(artistAlbums); // this resolves the promise for each album request\n      }).then(albums => {\n        //console.log(albums.flat());\n        this.setState({\n          artistReleases: albums.flat().sort((a, b) => a.release_date < b.release_date),\n          artistAlbums: albums,\n          userDataReceived: true\n        });\n      });\n    }\n  }\n\n  getHashParams() {\n    // provided by jmperez\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  render() {\n    //const artistsFollowed = this.state.artists;\n    const artistReleases = this.state.artistReleases;\n    const releaseList = artistReleases.map(release => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: release.id,\n        style: {\n          border: '1px solid charcoal',\n          margin: '4px',\n          padding: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, release.name), /*#__PURE__*/React.createElement(\"img\", {\n        src: release.images[0].url,\n        height: \"200\",\n        onClick: () => spotifyWebApi.play({\n          context_uri: release.uri\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, release.release_date));\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"stickyHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"header-brand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, \"My Music Timeline\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"displayName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, this.state.displayName), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"imageCropper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.profileImage,\n      height: \"50px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 51\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, !this.state.loggedIn && /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      style: {\n        background: '#1DB954'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, \"Login to Spotify\")), releaseList));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/twropp/Desktop/Summer-Projects/spotify-timeline-app/client/src/App.js"],"names":["React","Component","Spotify","spotifyWebApi","App","constructor","props","params","getHashParams","state","loggedIn","access_token","artists","artistAlbums","artistReleases","userDataReceived","displayName","profileImage","setAccessToken","componentDidMount","getMe","then","response","setState","display_name","images","url","getFollowedArtists","limit","items","map","artist","name","id","getArtistAlbums","country","albums","Promise","all","flat","sort","a","b","release_date","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","render","releaseList","release","border","margin","padding","play","context_uri","uri","background"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js'\n\nconst spotifyWebApi = new Spotify();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.state = {\n        loggedIn : params.access_token ? true : false,\n        artists : [], // just artists\n        artistAlbums : [], // albums grouped by artist,\n        artistReleases : [],\n        userDataReceived : false, // used to control rendering,\n        displayName: \"\",\n        profileImage: \"\"\n    }\n\n    if (params.access_token) {\n        spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n  }\n\n  componentDidMount() {\n      /*if (this.state.loggedIn) {\n          spotifyWebApi.getFollowedArtists({limit:50}) // WHAT IF YOU HAVE MORE THAN 50 FOLLOWED ARTISTS?\n          .then((response) => { // waits for artists followed\n              this.setState({\n                  artists : response.artists.items\n              });\n              return response.artists.items.map((artist) => {return {name : artist.name, id : artist.id}});\n          })\n          .then((artists) => { // waits for artist id array\n              const artistAlbums = artists.map((artist) => {\n                  return spotifyWebApi.getArtistAlbums(artist.id, {limit:10, country:'US'});\n              });\n              return Promise.all(artistAlbums); // this resolves the promise for each album request\n          })\n          .then((albums) => {\n              console.log(albums);\n              this.setState({\n                  artistAlbums: albums,\n                  userDataReceived : true\n              });\n          });\n      }*/\n      //spotifyWebApi.play({});\n\n      if (this.state.loggedIn) {\n          spotifyWebApi.getMe().then((response) => {this.setState({displayName: response.display_name, profileImage: response.images[0].url})})\n\n          spotifyWebApi.getFollowedArtists({limit:20}) // WHAT IF YOU HAVE MORE THAN 50 FOLLOWED ARTISTS?\n          .then((response) => { // waits for artists followed\n              this.setState({\n                  artists : response.artists.items\n              });\n              return response.artists.items.map((artist) => {return {name : artist.name, id : artist.id}});\n          })\n          .then((artists) => { // waits for artist id array\n              const artistAlbums = artists.map((artist) => {\n                  return spotifyWebApi.getArtistAlbums(artist.id, {limit:10, country:'US'})\n                  .then((albums) => {\n                      //console.log(albums.items);\n                      return (albums.items);\n                  })\n              });\n              return Promise.all(artistAlbums);\n              //return Promise.all(artistAlbums); // this resolves the promise for each album request\n          })\n          .then((albums) => {\n              //console.log(albums.flat());\n\n              this.setState({\n                  artistReleases : albums.flat().sort((a,b) => a.release_date < b.release_date),\n                  artistAlbums: albums,\n                  userDataReceived : true\n              });\n          });\n      }\n  }\n\n  getHashParams() { // provided by jmperez\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  render() {\n      //const artistsFollowed = this.state.artists;\n\n    const artistReleases = this.state.artistReleases;\n    const releaseList = artistReleases.map((release)=> {\n        return (\n            <div key={release.id} style={{\n            border:'1px solid charcoal',\n            margin: '4px',\n            padding: '5px'\n            }}>\n                <div>{release.name}</div>\n                <img src={release.images[0].url} height=\"200\" onClick={() => spotifyWebApi.play({context_uri : release.uri})}></img>\n                <div>{release.release_date}</div>\n            </div>\n        )\n    })\n\n      return (\n        <div className=\"App\">\n            <header className=\"stickyHeader\">\n                <h1 className=\"header-brand\">My Music Timeline</h1>\n                <div className=\"header-profile\">\n                    <div className=\"displayName\">{this.state.displayName}</div>\n                    <div className=\"imageCropper\"><img src={this.state.profileImage} height=\"50px\"/></div>\n                </div>\n            </header>\n            <div className=\"body\">\n                {!this.state.loggedIn &&\n                    <a href=\"http://localhost:8888\">\n                        <button style={{background: '#1DB954'}}>Login to Spotify</button>\n                    </a>\n                }\n                {releaseList}\n            </div>\n        </div>\n      );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}